{"version":3,"sources":["NFT.js","TokenBalance.js","WalletAvatar.js","Wallet.js","judex.svg","Page2.js","TokenSelector.js","ConfirmDialog.js","Swapper.js","App.js","App2.js","index.js"],"names":["NFT","TokenBalance","WalletAvatar","props","seed","size","scale","Wallet","useMoralis","authenticate","isAuthenticated","user","isAuthenticating","authError","logout","spacing","isInline","width","backgroundColor","borderRadius","p","mt","justifyContent","alignItems","Math","random","ml","fontSize","colorScheme","hasArrow","label","bg","aria-label","icon","Link","variant","onClick","signingMessage","address","get","substring","Copy","navigator","clipboard","writeText","Close","Page2Container","overflow","height","as","flexDirection","m","src","Judex","children","TokenSelector","tokenAddress","value","tokens","token","balances","onSelect","useDisclosure","isOpen","onOpen","onClose","web3","useState","pl","pr","logoURI","symbol","scrollBehavior","Object","keys","map","el","i","img","sym","nme","name","balance","utils","fromWei","_t","ConfirmDialog","token0","token1","token0Amt","token0Amount","token1Amt","token1Amount","mb","textAlign","color","fontStyle","onConfirm","Swapper","loading","setLoading","allowed","needsRechecked","setToken0","setToken1","token0Val","setToken0Val","token1Val","setToken1Val","token0Allowing","setToken0Allowing","swapAction","setSwapAction","Moralis","getQuote","quote","availableTokens","aTokens","tokenBalances","indexedBalances","hasAllowance","tryApprove","trySwap","userAddress","onComplete","length","token_address","bal0","bal1","token0Symbol","token1Symbol","token0Prec","decimals","token1Prec","token0Allow","token1Allow","token0Value","toWei","token1Value","console","log","then","_r","checkForQuote","_token","gotQuote","_data","hasOwnProperty","tFrom","fromToken","tTo","toToken","tAmount","toTokenAmount","_v","_set","_t0","_t1","t0a","t1a","re","rej","r","setToken","_slot","bal","maxValue","clickApproveTrade","_amount","data","JSON","stringify","_address","_from","_to","swapRequest","rt","s","pt","onChange","v","defaultValue","min","max","precision","ChevronDown","switchTokens","disabled","isLoading","App","isInitialized","enableWeb3","isWeb3Enabled","isWeb3EnableLoading","web3EnableError","useMoralisWeb3Api","usingAPI","setUsingAPI","setBalance","setTokens","nfts","setNFTs","setGas","chain","account","setAccounts","a","Plugins","oneInch","swap","fromTokenAddress","toTokenAddress","amount","fromAddress","slippage","approve","allowance","getTokenBalances","_account","Web3API","sort","b","localStorage","setItem","getSwapQuote","ad0","ad1","thign","DefaultList2","getNFTs","result","getAccounts","initPlugins","enable","getBalance","eth","getGas","getGasPrice","Page2","React","Component","theme","extendTheme","config","initialColorMode","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"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","file":"static/js/main.18f3635a.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  ChakraProvider,\r\n  Stack,\r\n  Box,\r\n  Text,\r\n  Image,\r\n  Grid,\r\n  GridItem\r\n} from '@chakra-ui/react';\r\n\r\nfunction NFT(props) {\r\n  \r\n  const nft = props.data;\r\n  const name = nft.name\r\n  const address = nft.token_address\r\n  const id = nft.id\r\n  const metadata = (nft.metadata ? JSON.parse(nft.metadata) : '')\r\n  console.log(metadata)\r\n  const symbol = nft.symbol\r\n\r\n  return(\r\n    <Box>\r\n        <Stack spacing={2}>\r\n            <Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\r\n                <GridItem colSpan={1}>\r\n                    <Stack spacing={2}>\r\n                    <Image height=\"100px\" width=\"100px\" />\r\n                    </Stack>\r\n                </GridItem>\r\n                <GridItem colSpan={4}>\r\n                    <Stack spacing={2}>\r\n                        <Text fontSize=\"2xl\">{name} {symbol}</Text>\r\n                        <Text>{(metadata) && (metadata.description)}</Text>\r\n                        <Text>{address}</Text>\r\n                    </Stack>\r\n                </GridItem>\r\n            </Grid>\r\n        </Stack>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default NFT","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport {\r\n  ChakraProvider,\r\n  Stack,\r\n  Box,\r\n  Text,\r\n  Image,\r\n  Grid,\r\n  GridItem,\r\n  Avatar,\r\n  AvatarBadge,\r\n} from '@chakra-ui/react';\r\nimport { useMoralis } from 'react-moralis';\r\n\r\nfunction TokenBalance(props) {\r\n    const { web3 } = useMoralis();\r\n    const [ open, setOpen ] = useState(false);\r\n\r\n    const token = props.data;\r\n    const address = token['token_address']\r\n    const name = token.name\r\n    const symbol = token.symbol\r\n    const balance = token.balance\r\n    const formatted_balance = web3.utils.fromWei(balance, 'ether')\r\n\r\n    return(\r\n        <Box>\r\n            <Stack spacing={2}>\r\n                <Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\r\n                    <GridItem colSpan={1}>\r\n                        <Stack spacing={2}>\r\n                        <Avatar name={symbol} src=\"\">\r\n                            <AvatarBadge bg=\"yellow.500\" boxSize=\"1.25rem\" borderColor=\"white\" />\r\n                        </Avatar>\r\n                        </Stack>\r\n                    </GridItem>\r\n                    <GridItem colSpan={4}>\r\n                        <Stack spacing={2}>\r\n                            <Text fontSize=\"2xl\">{formatted_balance} {symbol}</Text>\r\n                            <Text>{address}</Text>\r\n                        </Stack>\r\n                    </GridItem>\r\n                </Grid>\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default TokenBalance","import React from 'react'\r\nimport Blockies from 'react-blockies'\r\n\r\nconst WalletAvatar = (props) => (\r\n    <Blockies\r\n      seed={props.seed}\r\n      size={5}\r\n      scale={13}\r\n    />\r\n)\r\n\r\nexport default WalletAvatar\r\n\r\n  /*\r\n    seed={props.seed} {/* the only required prop; determines how the image is generated \r\n    size={10} {/* number of squares wide/tall the image will be; default = 15 \r\n    scale={3} {/* width/height of each square in pixels; default = 4 \r\n    color=\"#dfe\" {/* normal color; random by default \r\n    bgColor=\"#ffe\" {/* background color; random by default \r\n    spotColor=\"#abc\" {/* color of the more notable features; random by default \r\n    className=\"identicon\" {/* optional class name for the canvas element; \"identicon\" by default \r\n\r\n  */","import React from 'react'\r\nimport {\r\n  ChakraProvider,\r\n  Stack,\r\n  Avatar,\r\n  AvatarBadge,\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  Box,\r\n  Button,\r\n  Center,\r\n  FormLabel,\r\n  Input,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Switch,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon,\r\n  Grid,\r\n  GridItem,\r\n  IconButton,\r\n  Text,\r\n  Flex,\r\n  Spacer,\r\n  Tag,\r\n  Tooltip\r\n} from '@chakra-ui/react'\r\n\r\nimport { LinkIcon, CloseIcon, CopyIcon } from '@chakra-ui/icons'\r\n\r\nimport { useMoralis } from 'react-moralis';\r\n\r\nimport WalletAvatar from './WalletAvatar'\r\n\r\nconst Wallet = (props) => {\r\n    const { authenticate, isAuthenticated, isAuthenticating, authError, user, logout } = useMoralis();\r\n\r\n    if(!isAuthenticated) {\r\n        return(\r\n            <Stack spacing={2} isInline width=\"400px\" backgroundColor=\"gray.600\" borderRadius={10} p={2} mt={1}>\r\n                <Flex\r\n                    width=\"100%\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"space-between\"\r\n                >\r\n                <WalletAvatar seed={`${Math.random() * (10**4)}`}/>\r\n                <Stack spacing={1} width=\"100%\" ml={2}>\r\n                    <Text fontSize=\"2xl\">Not Connected</Text>\r\n                    <Stack spacing={1} width=\"100%\" ml={2} isInline>\r\n                        <Text fontSize=\"sm\">Chains:</Text>\r\n                        <Tag colorScheme=\"blue\">ETH</Tag>\r\n                        <Tag colorScheme=\"cyan\">POLYGON</Tag>\r\n                    </Stack>\r\n                </Stack>\r\n                <Spacer />\r\n                    <Tooltip hasArrow label=\"connect\" bg=\"gray.100\">\r\n                    <IconButton\r\n                        aria-label=\"icon\"\r\n                        icon={<LinkIcon />}\r\n                        size=\"md\"\r\n                        variant=\"solid\"\r\n                        colorScheme=\"yellow\"\r\n                        borderRadius={10}\r\n                        onClick={() => authenticate({ signingMessage: \"Test Authentication\" })}\r\n                    />\r\n                    </Tooltip>\r\n                </Flex>\r\n            </Stack>\r\n        )\r\n    }\r\n    \r\n    const address = user.get('ethAddress')\r\n\r\n    return(\r\n        <Stack spacing={2} isInline width=\"400px\" backgroundColor=\"gray.600\" borderRadius={10} p={2} mt={1}>\r\n            <Flex\r\n                width=\"100%\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"space-between\"\r\n            >\r\n                <WalletAvatar seed={address}/>\r\n                <Stack spacing={1} width=\"100%\" ml={2}>\r\n                    <Text fontSize=\"2xl\">{address.substring(0,6) + \" . . . \" + address.substring(37,42)}</Text>\r\n                    <Stack spacing={2} width=\"100%\" ml={2} isInline>\r\n                        <Tag colorScheme=\"cyan\">POLYGON</Tag>\r\n                    </Stack>\r\n                </Stack>\r\n                <Spacer />\r\n                <Stack spacing={1} ml={2}>\r\n                    <Tooltip hasArrow label=\"copy\" bg=\"gray.100\">\r\n                        <IconButton\r\n                            aria-label=\"icon\"\r\n                            icon={<CopyIcon />}\r\n                            size=\"sm\"\r\n                            variant=\"solid\"\r\n                            borderRadius={10}\r\n                            onClick={() => {navigator.clipboard.writeText(address)}}\r\n                        />\r\n                    </Tooltip>\r\n                    \r\n                    <Tooltip hasArrow label=\"logout\" bg=\"gray.100\">\r\n                    <IconButton aria-label=\"icon\" icon={<CloseIcon />} size=\"sm\" variant=\"solid\" colorScheme=\"red\" borderRadius={10} onClick={() => logout()}  />\r\n                    </Tooltip>\r\n                </Stack>\r\n            </Flex>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default Wallet","export default __webpack_public_path__ + \"static/media/judex.79332d9c.svg\";","import React from 'react'\r\nimport {\r\n  ChakraProvider,\r\n  Center,\r\n  Stack,\r\n  Avatar,\r\n  AvatarBadge,\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  Box,\r\n  FormLabel,\r\n  Input,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Flex,\r\n  Spacer,\r\n  Switch,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  Text,\r\n  Image\r\n} from '@chakra-ui/react'\r\n\r\nimport Wallet from './Wallet'\r\n\r\nimport Judex from './judex.svg'\r\n\r\nconst Page2Container = (props) => {\r\n\r\n    return(\r\n        <Box overflow=\"hidden\" width=\"100vw\" height=\"100vh\" backgroundColor=\"gray.900\">\r\n            <Stack spacing={0}>\r\n                    <Flex as=\"nav\" flexDirection=\"row\" alignItems=\"flex-start\" backgroundColor=\"gray.700\" p={2} width=\"100%\" height=\"100%\">\r\n                        <Center width=\"100vw\" height=\"100%\">\r\n                        <Heading m={3}><Image height=\"100%\" width='200px' src={Judex} /></Heading>\r\n                        <Spacer />\r\n                        <Wallet />\r\n                        </Center>\r\n                    </Flex>\r\n                <Box width=\"100vw\" height=\"100%\">\r\n                    {props.children}\r\n                </Box>\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Page2Container","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useDisclosure } from '@chakra-ui/hooks'\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Container,\r\n    Select,\r\n    Flex,\r\n    Spacer,\r\n    Text,\r\n    Avatar,\r\n    Stack,\r\n    Image\r\n  } from \"@chakra-ui/react\"\r\nimport { useMoralis } from 'react-moralis'\r\n\r\nimport TokenRow from './TokenRow'\r\n\r\nconst TokenSelector = (props) => {\r\n    \r\n    const tokenAddress = props.value\r\n\r\n    var tokens = props.tokens\r\n\r\n    const token = tokens[tokenAddress]\r\n\r\n    const balances = props.balances\r\n\r\n    const onSelect = props.onSelect\r\n\r\n    const initToken = (tokens ? tokens[tokenAddress] : null)\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const { web3 } = useMoralis()\r\n\r\n    const [ balance, setBalance ] = useState()\r\n\r\n    //console.log(tokens)\r\n    //console.log(balances)\r\n\r\n    const selectToken = (_t) => {\r\n\r\n        if(onSelect) {\r\n            onSelect(_t)\r\n        }\r\n\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(token) && (<Button onClick={onOpen} variant=\"ghost\" size=\"lg\" pl={6} pr={6}>\r\n                <Image height=\"75%\" width=\"auto\" src={token.logoURI} borderRadius={50}/>\r\n                <Text ml={1}>{token.symbol}</Text>\r\n            </Button>)}\r\n            {(!token) && (<Button onClick={onOpen} variant=\"ghost\" size=\"lg\" pl={6} pr={6}>\r\n                <Image height=\"75%\" width=\"auto\" src={'https://tokens.1inch.io/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0.png'} />\r\n                <Text ml={1}>{'Select'}</Text>\r\n            </Button>)}\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose} scrollBehavior={\"inside\"}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Select a Token</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        {Object.keys(tokens).map((el, i) => {\r\n                            const img = tokens[el].logoURI\r\n                            const sym = tokens[el].symbol\r\n                            const nme = tokens[el].name\r\n                            const balance = (balances[el] ? web3.utils.fromWei(balances[el], 'ether') : 0)\r\n                            return(\r\n                                <div onClick={() => selectToken(el)} key={i}>\r\n                                <Flex m={2}>\r\n                                    <Avatar src={img} />\r\n                                    <Stack spacing={0} ml={2}>\r\n                                        <Text fontSize=\"lg\">{sym}</Text>\r\n                                        <Text fontSize=\"xs\">{nme}</Text>\r\n                                    </Stack>\r\n                                    <Spacer />\r\n                                    <Text fontSize=\"lg\">{balance}</Text>\r\n                                </Flex>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"blue\" variant=\"ghost\" onClick={onClose}>\r\n                        Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TokenSelector;","import React from 'react'\r\nimport {\r\n  ChakraProvider,\r\n  Stack,\r\n  Avatar,\r\n  AvatarBadge,\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  FormLabel,\r\n  Input,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Switch,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon,\r\n  Text,\r\n  Flex,\r\n  CloseButton,\r\n  Center,\r\n  Button,\r\n  Spacer,\r\n  Container\r\n} from '@chakra-ui/react'\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\"\r\nimport { EmailIcon, CopyIcon } from '@chakra-ui/icons'\r\nimport { useMoralis } from 'react-moralis'\r\n\r\nconst ConfirmDialog = (props) => {\r\n\r\n  const { web3 } = useMoralis();\r\n\r\n  const token0 = props.token0\r\n  const token1 = props.token1\r\n  let token0Amt = \"\" + ((props.token0Amount) ? web3.utils.fromWei(props.token0Amount, 'ether') : 0)\r\n  token0Amt = `~${token0Amt.substring(0,9)}`\r\n  let token1Amt = \"\" + ((props.token1Amount) ? web3.utils.fromWei(props.token1Amount, 'ether') : 0)\r\n  token1Amt = `~${token1Amt.substring(0,9)}`\r\n\r\n  //const price = web3.utils.fromWei(props.token0Amount / props.token1Amount, 'ether')\r\n\r\n  return(\r\n    <div>\r\n      <Modal isOpen={props.isOpen} onClose={props.onClose}>\r\n        <ModalOverlay />\r\n          <ModalContent borderRadius={30}>\r\n            <ModalHeader>Confirm Swap</ModalHeader>\r\n            <ModalCloseButton m={2} />\r\n            <ModalBody mb={4}>\r\n              {token0 && (<Stack\r\n                spacing={2}\r\n                isInline\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                justifyContent=\"flex-end\"\r\n                backgroundColor=\"gray.600\"\r\n                borderRadius={15}\r\n                mb={1}\r\n              >\r\n                <Stack spacing={2} width=\"400px\">\r\n                \r\n                  <Flex m={2}>\r\n                    <Avatar src={token0.logoURI} />\r\n                    <Stack spacing={0} ml={2}>\r\n                      <Text fontSize=\"lg\">{token0.symbol}</Text>\r\n                      <Text fontSize=\"xs\">{token0.name}</Text>\r\n                    </Stack>\r\n                    <Spacer />\r\n                    <Text fontSize=\"2xl\">{token0Amt}</Text>\r\n                  </Flex>\r\n  \r\n                </Stack>\r\n  \r\n              </Stack>)}\r\n              {token1 && (<Stack\r\n                spacing={2}\r\n                isInline\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                justifyContent=\"flex-end\"\r\n                backgroundColor=\"gray.600\"\r\n                borderRadius={15}\r\n                mb={1}\r\n              >\r\n                <Stack spacing={2} width=\"400px\">\r\n                \r\n                  <Flex m={2}>\r\n                    <Avatar src={token1.logoURI} />\r\n                    <Stack spacing={0} ml={2}>\r\n                      <Text fontSize=\"lg\">{token1.symbol}</Text>\r\n                      <Text fontSize=\"xs\">{token1.name}</Text>\r\n                    </Stack>\r\n                    <Spacer />\r\n                    <Text fontSize=\"2xl\">{token1Amt}</Text>\r\n                  </Flex>\r\n  \r\n                </Stack>\r\n  \r\n              </Stack>)}\r\n              \r\n              <Stack spacing={0} width=\"100%\" height=\"100%\" p={1} textAlign=\"center\">\r\n                  <Text fontSize=\"md\" color=\"gray.400\" fontStyle=\"italic\">Output is estimated.</Text>\r\n                  <Text fontSize=\"md\" color=\"gray.400\" fontStyle=\"italic\">Use smart contracts at your own risk.</Text>\r\n              </Stack>\r\n            </ModalBody>\r\n            \r\n            <Container width=\"100%\" height=\"100%\" backgroundColor=\"gray.600\" p={7} mb={-6}>\r\n  \r\n                <Flex\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"space-between\"\r\n                >\r\n                  <Text fontSize=\"md\" color=\"gray.400\">\r\n                    Price\r\n                  </Text>\r\n                  <Text fontSize=\"md\">0</Text>\r\n                </Flex>\r\n                \r\n                <Flex\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"space-between\"\r\n                >\r\n                  <Text fontSize=\"md\" color=\"gray.400\">\r\n                    S\r\n                  </Text>\r\n                  <Text fontSize=\"md\">0</Text>\r\n                </Flex>\r\n  \r\n            </Container>\r\n            <Container width=\"100%\" height=\"100%\" backgroundColor=\"gray.600\" borderRadius={30} p={7}>\r\n              <Button\r\n                p={5}\r\n                width=\"100%\"\r\n                height=\"50px\"\r\n                colorScheme=\"messenger\"\r\n                borderRadius={10}\r\n                onClick={props.onConfirm}\r\n              >Confirm Swap</Button>\r\n            </Container>\r\n          </ModalContent>\r\n        </Modal>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default ConfirmDialog","import React from 'react'\r\nimport { useState } from 'react'\r\nimport {\r\n  ChakraProvider,\r\n  Stack,\r\n  Avatar,\r\n  AvatarBadge,\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  FormLabel,\r\n  Input,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Switch,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon,\r\n  IconButton,\r\n  Box,\r\n  Center,\r\n  Flex,\r\n  Tag,\r\n  Select,\r\n  Button,\r\n  Text,\r\n  Spacer\r\n} from '@chakra-ui/react'\r\nimport {\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n} from \"@chakra-ui/react\"\r\nimport { useDisclosure } from '@chakra-ui/hooks'\r\nimport { ChevronDownIcon } from '@chakra-ui/icons'\r\n\r\nimport { useMoralis } from 'react-moralis'\r\n\r\nimport TokenSelector from './TokenSelector'\r\nimport ConfirmDialog from './ConfirmDialog'\r\n\r\nconst Swapper = (props) => {\r\n  const [ loading, setLoading ] = useState(false)\r\n  const [ token0, setToken0 ] = useState({\r\n    address: false,\r\n    balance: false,\r\n    allowed: false,\r\n    needsRechecked: true\r\n  })\r\n  const [ token1, setToken1 ] = useState({\r\n    address: false,\r\n    balance: false,\r\n    allowed: false,\r\n    needsRechecked: true\r\n  })\r\n  const [ token0Val, setToken0Val ] = useState(0)\r\n  const [ token1Val, setToken1Val ] = useState(0)\r\n\r\n  const [ token0Allowing, setToken0Allowing ] = useState(false)\r\n  const [ token1Allowing, setToken1Allowing ] = useState(false)\r\n  const [ swapAction, setSwapAction ] = useState(false)\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n  const { Moralis, web3 } = useMoralis()\r\n\r\n  const getQuote = props.quote\r\n\r\n  const availableTokens = props.aTokens\r\n  const tokenBalances = props.balances\r\n  let indexedBalances = false\r\n\r\n  const hasAllowance = props.hasAllowance\r\n  const tryApprove = props.tryApprove\r\n  const trySwap = props.trySwap\r\n\r\n  const userAddress = props.userAddress\r\n\r\n  const onConfirmOpen = props.onConfirm\r\n  const onCompleteOpen = props.onComplete\r\n\r\n  if(tokenBalances) {\r\n      indexedBalances = {}\r\n      for(let i = 0; i < tokenBalances.length; i++) {\r\n          let token = tokenBalances[i]\r\n          indexedBalances[token.token_address] = token.balance\r\n      }\r\n  }\r\n\r\n  const bal0 = (token0.balance ? web3.utils.fromWei(token0.balance, 'ether') : 0)\r\n  const bal1 = (token1.balance ? web3.utils.fromWei(token1.balance, 'ether') : 0)\r\n\r\n  const token0Symbol = (token0.address ? availableTokens[token0.address].symbol : false)\r\n  const token1Symbol = (token1.address ? availableTokens[token1.address].symbol : false)\r\n\r\n  const token0Prec = (token0.address ? availableTokens[token0.address].decimals : 18)\r\n  const token1Prec = (token1.address ? availableTokens[token1.address].decimals : 18)\r\n\r\n  const token0Allow = (token0.allowed ? token0.allowed : false)\r\n  const token1Allow = (token1.allowed ? token1.allowed : false)\r\n\r\n  const token0Value = (token0Val > 0 ? web3.utils.toWei(`${token0Val}`, 'ether') : 0)\r\n  const token1Value = (token1Val > 0 ? web3.utils.toWei(`${token1Val}`, 'ether') : 0)\r\n\r\n  if(token0Allowing) {\r\n    console.log(token0Allowing)\r\n    const res = (_r) => {\r\n      console.log(_r)\r\n      \r\n      checkForQuote()\r\n      setToken0Allowing(false)\r\n    }\r\n    const rej = (_r) => {\r\n      console.log(_r)\r\n      setToken0Allowing(false)\r\n    }\r\n    token0Allowing.then(res, rej)\r\n  } else {\r\n    //console.log('NOT ALLOWING')\r\n  }\r\n\r\n  const onTodoChange = (_slot, _value) => {\r\n    if(_slot == '0') {\r\n      setToken0Val(_value)\r\n    }\r\n    if(_slot == '1') {\r\n      setToken1Val(_value)\r\n    }\r\n  }\r\n\r\n  const hasApproval = (_token, _amount) => {\r\n    return(hasAllowance(_token, _amount))\r\n  }\r\n\r\n  const awaitApproval = (_token, _amount) => {\r\n    return(tryApprove(_token, _amount))\r\n  }\r\n\r\n  const gotQuote = (_data) => {\r\n    //console.log(_data)\r\n    setSwapAction(false)\r\n    setLoading(false)\r\n\r\n    if(_data.hasOwnProperty('statusCode')) {\r\n      throw(_data)\r\n    }\r\n    if(_data.hasOwnProperty('error')) {\r\n      throw(_data)\r\n    }\r\n\r\n    console.log(_data)\r\n\r\n    const tFrom = _data.fromToken\r\n    const tTo = _data.toToken\r\n    const tAmount = _data.toTokenAmount\r\n    console.log(`QUOTE: ${tAmount / (10 ** tTo.decimals)}`)\r\n\r\n    if(tFrom.address == token0.address) {\r\n      setToken1Val(tAmount / (10 ** tTo.decimals))\r\n    } else if (tFrom.address == token1.address) {\r\n      setToken0Val(tAmount / (10 ** tTo.decimals))\r\n    }\r\n  }\r\n\r\n  const checkForQuote = (_v, _set='0', _t0=null, _t1=null) => {\r\n    const t0a = (_t0 ? _t0 : token0.address)\r\n    const t1a = (_t1 ? _t1 : token1.address)\r\n    console.log(t0a, t1a)\r\n    if (!t0a || !t1a) {\r\n      return(false)\r\n    }\r\n    setLoading(true)\r\n\r\n    if(loading) {\r\n      return\r\n    }\r\n\r\n    console.log('FETCHING QUOTE')\r\n\r\n    if (_set) {\r\n      let re = null\r\n      if(_set == '0') {\r\n        re = getQuote(t0a, t1a, _v)\r\n        \r\n      }\r\n      if(_set == '1') {\r\n        re = getQuote(t1a, t0a, _v)\r\n        \r\n      }\r\n      \r\n      const rej = (r) => {\r\n        setSwapAction(false)\r\n        throw(r)\r\n      }\r\n\r\n      re.then(gotQuote, rej)\r\n\r\n      setSwapAction( re )\r\n\r\n    } else {\r\n      return(false)\r\n    }\r\n  }\r\n\r\n  const careForApproval = (_token, _amount) => {\r\n    console.log(`CHECKING APPROVAL FOR ${_token}`)\r\n    let result = hasAllowance(_token, 1).then((data) => {\r\n      if(_token == token0.address) { \r\n        console.log(`token0 allowed: ${JSON.stringify(data)}`)\r\n        setToken0({\r\n          address: token0.address,\r\n          balance: token0.balance,\r\n          allowed: data,\r\n          needsRechecked: false\r\n        })\r\n      }\r\n      if(_token == token1.address) {  \r\n        console.log(`token1 allowed: ${JSON.stringify(data)}`)\r\n        setToken1({\r\n          address: token1.address,\r\n          balance: token1.balance,\r\n          allowed: data,\r\n          needsRechecked: false\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  const setToken = (_slot, _t) => {\r\n    let bal = (indexedBalances.hasOwnProperty(_t) ? indexedBalances[_t]: 0)\r\n    if(_slot == '0') {\r\n      setToken0({\r\n        address: _t,\r\n        balance: bal,\r\n        allowed: token0.allowed,\r\n        needsRechecked: true\r\n      })\r\n      checkForQuote(bal, '0', _t, null)\r\n    }\r\n    if(_slot == '1') {\r\n      setToken1({\r\n        address: _t,\r\n        balance: bal,\r\n        allowed: token1.allowed,\r\n        needsRechecked: true\r\n      })\r\n      checkForQuote(bal, '1', null, _t)\r\n    }\r\n  }\r\n\r\n  const switchTokens = () => {\r\n    let _t0 = token1\r\n    let _t1 = token0\r\n    setToken('0', _t0.address)\r\n    setToken('1', _t1.address)\r\n  }\r\n\r\n  const maxValue = (_slot) => {\r\n    if(_slot == '0') {\r\n      setToken0Val(bal0)\r\n      checkForQuote(bal0, '0')\r\n    }\r\n    if(_slot == '1') {\r\n      setToken1Val(bal1)\r\n      checkForQuote(bal1, '1')\r\n    }\r\n  }\r\n\r\n  const clickApproveTrade = () => {\r\n    setToken0Allowing(awaitApproval(token0.address, token0.balance))\r\n  }\r\n\r\n    \r\n  if(token0.address && token0.needsRechecked) {\r\n    careForApproval(token0.address, token0.balance)\r\n  }\r\n  if(token1.address && token1.needsRechecked) {\r\n    //careForApproval(token1.address, token1.balance)\r\n    setToken1({\r\n      address: token1.address,\r\n      balance: token1.balance,\r\n      allowed: true,\r\n      needsRechecked: false\r\n    })\r\n  }\r\n\r\n  const clickTrySwap = () => {\r\n    let _address = userAddress\r\n    let _from = token0.address\r\n    let _to = token1.address\r\n    let _amount = web3.utils.toWei(token0Val, 'ether')\r\n    console.log(_amount)\r\n\r\n    let swapRequest = trySwap(_address, _from, _to, _amount)\r\n\r\n    console.log(swapRequest)\r\n\r\n    const res = (rt) => {\r\n      console.log(JSON.stringify(rt))\r\n\r\n      /*\r\n        blockHash: \"0x7ab2f3ea6fb74f41f7d49c48db7713d99a834a6a33e5fb8ba3cbef2afc3cf388\"\r\nblockNumber: 20003460\r\ncontractAddress: null\r\ncumulativeGasUsed: 2491961\r\neffectiveGasPrice: \"0x826299e00\"\r\nfrom: \"0xc535e19eeed3f4a7f56819e77fb9d31e1a41a0bc\"\r\ngasUsed: 185550\r\nlogs: (9) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\r\nlogsBloom: \"0x00200000000000000000000080000000002000080000000000000000280000800000000000000400000000000001000800008000000800042000000000200000000008008000000000000008000000a00000000000000000000300000000000000000000000000000001400000000000000000000000004180004010000000001001000000000000000000000200000000000000000000080000004000000040220000000000000000000000000000000400000000000000000000000000004000000002004000000001000000001000080000000000001000100080000000000010008080000000000000000004000000000000010080000000000000100000\"\r\nstatus: true\r\nto: \"0x11111112542d85b3ef69ae05771c2dccff4faa26\"\r\ntransactionHash: \"0x3a2638f4f597def88f114da01372fb44aaacf42d80a57ec569a22f6af3e47e2c\"\r\ntransactionIndex: 12\r\ntype: \"0x0\"\r\n      */\r\n      setSwapAction(false)\r\n    }\r\n    const rej = (rt) => {\r\n      setSwapAction(false)\r\n    }\r\n\r\n    swapRequest.then(res, rej)\r\n\r\n    setSwapAction(swapRequest)\r\n  }\r\n\r\n  return(\r\n      <Box width=\"100%\" height=\"100vh\">\r\n        \r\n        <ConfirmDialog isOpen={isOpen} onClose={onClose} onConfirm={clickTrySwap}\r\n          token0={availableTokens[token0.address]} token1={availableTokens[token1.address]}\r\n          token0Amount={token0Value} token1Amount={token1Value}\r\n        />\r\n\r\n        <Center width=\"100%\" height=\"50%\">\r\n          <Box width=\"480px\" p={5} backgroundColor=\"gray.800\" borderRadius={30}>\r\n            <Flex p={5} justifyContent=\"flex-end\">\r\n              <Text>Swap between Tokens</Text>\r\n              <Spacer />\r\n              <Tag colorScheme=\"cyan\">1INCH</Tag>\r\n            </Flex>\r\n\r\n            <Box backgroundColor=\"gray.700\" p={1} borderRadius={10}>\r\n              <Stack spacing={0} p={1} backgroundColor=\"gray.600\" borderRadius={10}>    \r\n                <Flex justifyContent=\"flex-end\">\r\n                  <Text ml={1}>From</Text>\r\n                  <Spacer />\r\n                  {(bal0) && (<Text>{bal0}</Text>)}\r\n                  <Button colorScheme=\"teal\" size=\"xs\" ml={1} onClick={() => maxValue('0')}>MAX</Button>\r\n                </Flex>\r\n                <Stack spacing={2} isInline borderRadius={10}>\r\n                    {(availableTokens && indexedBalances) && (\r\n                      <TokenSelector\r\n                      onSelect={(s) => setToken(\"0\",s)}\r\n                      value={token0.address}\r\n                      tokens={availableTokens}\r\n                      balances={indexedBalances}\r\n                      />\r\n                    )}\r\n                    <NumberInput pt={1} onChange={v => setToken0Val(v)} value={token0Val} defaultValue={0} min={0.000000000000000001} max={1000000000000000000} precision={token0Prec} width=\"100%\" height=\"100%\">\r\n                      <NumberInputField />\r\n                    </NumberInput>\r\n                </Stack>\r\n              </Stack>\r\n              <Center width=\"100%\" height=\"100%\" p={1}>\r\n                <IconButton variant=\"ghost\" aria-label=\"icon\" icon={<ChevronDownIcon />} size=\"lg\" onClick={() => switchTokens()}/>\r\n              </Center>\r\n              <Stack spacing={0} p={1} backgroundColor=\"gray.600\" borderRadius={10}>    \r\n                <Flex justifyContent=\"flex-end\">\r\n                  <Text ml={1}>To</Text>\r\n                  <Spacer />\r\n                  {(bal1) && (<Text>{bal1}</Text>)}\r\n                  <Button colorScheme=\"teal\" size=\"xs\" ml={1} onClick={() => maxValue('1')}>MAX</Button>\r\n                </Flex>\r\n                <Stack spacing={2} isInline borderRadius={10}>\r\n                    {(availableTokens && indexedBalances) && (\r\n                      <TokenSelector\r\n                      onSelect={(s) => setToken(\"1\",s)}\r\n                      value={token1.address}\r\n                      tokens={availableTokens}\r\n                      balances={indexedBalances}\r\n                      />\r\n                    )}\r\n                    <NumberInput pt={1} onChange={v => setToken1Val(v)} value={token1Val} defaultValue={0} min={0.000000000000000001} max={1000000000000000000} precision={token1Prec} width=\"100%\" height=\"100%\">\r\n                      <NumberInputField />\r\n                    </NumberInput>\r\n                </Stack>\r\n              </Stack>\r\n            </Box>\r\n\r\n            <Box mt={3}>\r\n              {((!token0Symbol && !token1Symbol) && (!token0Allow && !token1Allow)) && (\r\n                <Button width=\"100%\" variant=\"solid\" size=\"lg\" borderRadius={10} disabled={true} isLoading={loading}>\r\n                  SWAP\r\n                </Button>\r\n              )}\r\n              {((!token0Allow || !token1Allow)) && (<Stack width=\"100%\" spacing={2} isInline>\r\n                  {(!token0Allow && token0Symbol) && (<Button isLoading={(token0Allowing !== false)} width=\"100%\" variant=\"solid\" size=\"md\" borderRadius={10} onClick={() => clickApproveTrade()}>\r\n                  APPROVE {token0Symbol}\r\n                  </Button>)}\r\n                  {(!token1Allow && token1Symbol && false) && (<Button width=\"100%\" variant=\"solid\" size=\"md\" borderRadius={10}>\r\n                  APPROVE {token1Symbol}\r\n                  </Button>)}\r\n              </Stack>)}\r\n              {(token0Allow && token1Allow) && (\r\n                <Button width=\"100%\" variant=\"solid\" size=\"lg\" borderRadius={10}\r\n                  isLoading={(swapAction !== false)}\r\n                  onClick={onOpen}\r\n                >\r\n                  SWAP\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </Center>\r\n      </Box>\r\n  )\r\n}\r\n\r\nexport default Swapper","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Stack,\n  Text,\n  IconButton,\n  Grid,\n  GridItem,\n  Center\n} from '@chakra-ui/react';\nimport { useDisclosure } from '@chakra-ui/hooks'\n\nimport { Container, Heading } from '@chakra-ui/layout';\nimport { useMoralis, useMoralisWeb3Api, useMoralisWeb3ApiCall } from 'react-moralis';\nimport { Auth } from './Auth';\n\nimport NFT from \"./NFT\";\nimport TokenBalance from \"./TokenBalance\";\n\nimport Page2Container from \"./Page2\";\nimport Swapper from \"./Swapper\";\nimport ConfirmDialog from \"./ConfirmDialog\";\n\nimport DefaultList from './tokenlists/tokens.json'\nimport DefaultList2 from './tokenlists/tokens2.json'\n\nfunction App() {\n  const { Moralis, isInitialized, isAuthenticated, logout, user, authenticate } = useMoralis()\n  const { web3, enableWeb3, isWeb3Enabled, isWeb3EnableLoading, web3EnableError } = useMoralis();\n  const Web3Api = useMoralisWeb3Api();\n\n  const [ usingAPI, setUsingAPI ] = useState(false);\n  const [ block, setBlock ] = useState('100000');\n\n  const [ balance, setBalance ] = useState();\n  const [ tokens, setTokens ] = useState();\n  const [ nfts, setNFTs ] = useState();\n  const [ gas, setGas ] = useState();\n  const [ aTokens, setATokens ] = useState();\n\n  const [ account, setAccounts ] = useState({\n    address: null,\n    chain: null\n  });\n\n  //console.log(Moralis)\n\n  const bigNumber = 10**18;\n\n  function printKeys(_obj) {\n    let keys = Object.keys(_obj)\n    for(let i = 0; i < keys.length; i++) {\n      console.log(keys[i])\n    }\n  }\n\n  //console.log(Moralis.Plugins)\n  const trySwap = async (_address, _from, _to, _amount) => {\n      /*\n\n      Moralis.Plugins.oneInch.swap({\n        chain: 'eth', // The blockchain you want to use (eth/bsc/polygon)\n        fromTokenAddress: currentTrade.from.address, // The token you want to swap\n        toTokenAddress: currentTrade.to.address, // The token you want to receive\n        amount: amount,\n        fromAddress: userAddress, // Your wallet address\n        slippage: 1,\n      });\n\n      */\n    return Moralis.Plugins.oneInch.swap({\n      chain: 'polygon', // The blockchain you want to use (eth/bsc/polygon)\n      fromTokenAddress: _from, // The token you want to swap\n      toTokenAddress: _to, // The token you want to receive\n      amount: _amount,\n      fromAddress: _address, // Your wallet address\n      slippage: 1,\n    });\n  }\n  \n  const tryApprove = async (_token, _amount) => {\n    const hasApproval = await hasAllowance(_token, _amount)\n    if(!hasApproval){\n      console.log(`Does not have allowance for ${_amount}`)\n      return await Moralis.Plugins.oneInch.approve({\n            chain: 'polygon', // The blockchain you want to use (eth/bsc/polygon)\n            tokenAddress: _token, // The token you want to swap\n            fromAddress: account.address, // Your wallet address\n          });\n    }\n    return true\n  }\n\n  const hasAllowance = async (_token, _amount) => {\n    const p = Moralis.Plugins.oneInch.hasAllowance({\n      chain: 'polygon', // The blockchain you want to use (eth/bsc/polygon)\n      fromTokenAddress: _token, // The token you want to swap\n      fromAddress: account.address, // Your wallet address\n      amount: _amount,\n    })\n    console.log(p)\n    const allowance = await p\n    return allowance\n  }\n\n  const getTokenBalances = async (_account) => {\n    //console.log(_account)\n    Moralis.Web3API.account.getTokenBalances(_account).then((_data) => {\n      let data = _data.sort(function(a,b) {\n        return b.balance - a.balance\n      });\n      localStorage.setItem('aTokens', data)\n      setTokens(data)\n    })\n  }\n\n  const getAvailableTokens = async () => {\n    //console.log(Moralis.Plugins.oneInch)\n    Moralis.Plugins.oneInch.getSupportedTokens({\n      chain: 'polygon', // The blockchain you want to use (eth/bsc/polygon)\n    }).then((data) => {\n      console.log(JSON.stringify(data.tokens))\n      setATokens(data.tokens)\n    })\n  }\n  const getSwapQuote = async (ad0, ad1, amount) => {\n    if(amount == 0) {\n      return({\n        'error' : 1,\n        'message' : 'amount must be more than 0'\n      })\n    }\n\n    if(ad0 == ad1) {\n      return({\n        'error' : 1,\n        'message' : 'you cannot trade to the same token'\n      })\n    }\n\n    let thign = (DefaultList2.hasOwnProperty(ad0) ? DefaultList2[ad0].symbol : 'UNKNOWN')\n    console.log(ad0)\n    console.log(ad1)\n    console.log(`GETTING QUOTE FOR ${amount} ${ad0} ${thign}`)\n    return Moralis.Plugins.oneInch.quote({\n      chain: 'polygon', // The blockchain you want to use (eth/bsc/polygon)\n      fromTokenAddress: ad0,\n      toTokenAddress: ad1,\n      amount: web3.utils.toWei(amount, 'ether')\n    })\n  }\n\n  const getNFTs = async (_account) => {\n    //console.log(_account)\n    Moralis.Web3API.account.getNFTs(_account).then((_data) => {\n      //console.log(_data)\n      setNFTs(_data.result)\n    })\n  }\n\n  const getAccounts = async () => {\n    await Moralis.initPlugins();\n    await Moralis.enable();\n    //console.log(user)\n    let _address = user.get('ethAddress');\n    let _chain = 'polygon';\n\n    setAccounts({\n      address: _address,\n      chain: _chain\n    })\n  }\n\n  const getBalance = async () => {\n    web3.eth.getBalance(account.address).then((value) => {\n      setBalance(web3.utils.fromWei(value, 'ether'))\n    })\n\n  }\n\n  const getGas = async () => {\n    web3.eth.getGasPrice().then((value) => {\n      setGas(web3.utils.fromWei(value, 'gwei'))\n    })\n  }\n\n  const onConfirmSwap = () => {\n    //onOpen()\n  }\n\n  const onSwapConfirmed = () => {\n    //onClose()\n  }\n\n  const onCompleteSwap = () => {\n    \n  }\n\n  //INIT USER\n  if(user && !account.address) {\n    let re = getAccounts()\n  }\n\n  if(isWeb3Enabled && account.address && !usingAPI) {\n    let re2 = null;\n    re2 = getGas()\n    re2 = getBalance()\n\n    if(!aTokens) {\n      //getAvailableTokens()\n    }\n    if(!tokens) {\n      getTokenBalances(account)\n    }\n    if(nfts) {\n      getNFTs(account)\n    }\n\n    setUsingAPI(true)\n\n  } else if (!isWeb3Enabled) {\n    //enableWeb3()\n  }\n\n  if (isInitialized && isAuthenticated) {\n\n    if(!isWeb3Enabled) {\n      return (\n        <Page2Container>\n          <Stack m={5} p={5} backgroundColor=\"gray.700\" borderRadius={5} spacing={5} isInline>\n            <Text fontSize=\"2xl\">Enable Web3</Text>\n            <Button onClick={() => enableWeb3()} isLoading={isWeb3EnableLoading}>Enable</Button>\n          </Stack>\n        </Page2Container>\n      )\n    }\n    return (\n      <Page2Container>\n\n        <Swapper\n          aTokens={DefaultList2}\n          balances={tokens}\n          quote={getSwapQuote}\n          hasAllowance={hasAllowance}\n          tryApprove={tryApprove}\n          trySwap={trySwap}\n          userAddress={account.address}\n\n          onConfirm={onConfirmSwap}\n          onComplete={onCompleteSwap}\n        />\n      </Page2Container>\n    )\n  }\n\n  return (\n    <Page2Container>\n      <Box width=\"100%\" height=\"100vh\">\n        <Center width=\"100%\" height=\"75%\">\n          <Box width=\"480px\" p={5} backgroundColor=\"gray.600\" borderRadius={10}>\n            <Center>\n            <Text fontSize=\"3xl\">Please connect a wallet</Text>\n            </Center>\n            <Button\n              width=\"100%\"\n              height=\"50px\"\n              colorScheme=\"yellow\"\n              borderRadius={10}\n              onClick={() => authenticate({ signingMessage: \"Test Authentication\" })}\n            >Connect to Metamask</Button>\n          </Box>\n        </Center>\n      </Box>\n    </Page2Container>\n  )\n}\n\nexport default App;\n","import React from 'react';\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Text,\r\n  IconButton,\r\n  Grid,\r\n  GridItem,\r\n  Center\r\n} from '@chakra-ui/react';\r\n\r\nimport { Moralis } from 'moralis';\r\nimport NFT from \"./NFT\";\r\nimport TokenBalance from \"./TokenBalance\";\r\n\r\nimport Page2Container from \"./Page2\";\r\nimport Swapper from \"./Swapper\";\r\n\r\nclass App2 extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.Moralis = Moralis\r\n\r\n        this.state = {\r\n            address : null,\r\n            tokenList : null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {   \r\n        this.initMoralis()\r\n        //console.log(Moralis.Plugins)\r\n        \r\n    }\r\n\r\n    render() {\r\n        if(!false) {\r\n            return (\r\n              <Page2Container>\r\n                <Stack m={5} p={5} backgroundColor=\"gray.700\" borderRadius={5} spacing={5} isInline>\r\n                  <Text fontSize=\"2xl\">Enable Web3</Text>\r\n                  <Button onClick={() => {}} isLoading={false}>Enable</Button>\r\n                </Stack>\r\n              </Page2Container>\r\n            )\r\n        }\r\n        return(\r\n            <Page2Container>\r\n                <Swapper />\r\n            </Page2Container>\r\n        )\r\n    }\r\n    printKeys(_obj) {\r\n        let keys = Object.keys(_obj)\r\n        for(let i = 0; i < keys.length; i++) {\r\n          console.log(keys[i])\r\n        }\r\n      }\r\n\r\n    initMoralis = async () => {\r\n\r\n        await Moralis.initPlugins();\r\n        await Moralis.enable();\r\n\r\n        this.printKeys(Moralis.User)\r\n        console.log(Moralis.User.get('ethAddress'))\r\n        let _address = Moralis.User.get('ethAddress');\r\n        this.setState({\r\n            address: _address\r\n        })\r\n    }\r\n\r\n    getAvailableTokens = async () => {\r\n        Moralis.Plugins.oneInch.getSupportedTokens({\r\n          chain: 'polygon', // The blockchain you want to use (eth/bsc/polygon)\r\n        }).then((data) => {\r\n          this.setState({\r\n              tokenList: data.tokens\r\n          })\r\n        })\r\n    }\r\n}\r\n\r\nexport default App2","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport App2 from './App2';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport { MoralisProvider } from 'react-moralis';\nimport { Moralis } from 'moralis';\n\nconst theme = extendTheme({\n  config: {\n    initialColorMode: 'dark',\n  },\n});\n\nconst appId = 'z8LKwOOBMvqq3yfHyan5wAx0h03qYBPF9v5LwCIn';\nconst serverUrl = 'https://i831umkjguf3.moralishost.com:2053/server';\n\n//const appId = 'o5plnbA1YVDT34wH3rhXuLnXYG61Cx4QuacYz0t2';\n//const serverUrl = 'https://wfdab2rnkm8y.moralishost.com:2053/server';\n\n//Moralis.initialize(appId)\n//Moralis.serverUrl = serverUrl;\n\nReactDOM.render(\n  <React.StrictMode>\n    <MoralisProvider appId={appId} serverUrl={serverUrl}>\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </MoralisProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}